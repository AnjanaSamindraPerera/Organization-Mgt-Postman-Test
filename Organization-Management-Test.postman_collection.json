{
	"info": {
		"_postman_id": "713b01bd-60e1-4ba0-b1d3-eaffb76aebf1",
		"name": "Organization-Management-Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Pre-requisite",
			"item": [
				{
					"name": "GET admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c5c7e64a-d1b1-499c-80fe-a1e57fc502f4",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"pm.environment.set(\"adminId\", jsonData.Resources[0].id);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d07b086e-edd6-415a-ba86-dae26da81a1c",
								"exec": [
									"let admin_username = 'admin'",
									"let admin_password = 'admin'",
									"let baseurl = 'https://localhost:9443'",
									"pm.environment.set('admin_username',admin_username)",
									"pm.environment.set('admin_password',admin_password)",
									"pm.environment.set('baseurl',baseurl)",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{baseurl}}/scim2/Users?filter=username+eq+{{admin_username}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"scim2",
								"Users"
							],
							"query": [
								{
									"key": "filter",
									"value": "username+eq+{{admin_username}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET  User_Administrator Role Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "87c74156-efb2-4cd9-8e0b-2b60c4151911",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"pm.environment.set(\"UserAdminRoleId\", jsonData.Resources[0].id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0bf0323e-29f9-4209-a011-23f4d7c20aad",
								"exec": [
									"let UserAdminRoleName = 'User_Administrator'",
									"pm.environment.set('UserAdminRoleName',UserAdminRoleName)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/scim2/Groups?filter=displayName+eq+{{UserAdminRoleName}}&domain=Internal",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"scim2",
								"Groups"
							],
							"query": [
								{
									"key": "filter",
									"value": "displayName+eq+{{UserAdminRoleName}}"
								},
								{
									"key": "domain",
									"value": "Internal"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET  User_Viewer Role Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1a33813b-bfdd-45fe-9f70-ac484cd566e0",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"pm.environment.set(\"UserViewerRoleId\", jsonData.Resources[0].id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3ad92c0e-957e-4d8b-8e5a-2fe915231f31",
								"exec": [
									"let UserViewerRoleName = 'User_Viewer'",
									"pm.environment.set('UserViewerRoleName',UserViewerRoleName)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/scim2/Groups?filter=displayName+eq+{{UserViewerRoleName}}&domain=Internal",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"scim2",
								"Groups"
							],
							"query": [
								{
									"key": "filter",
									"value": "displayName+eq+{{UserViewerRoleName}}"
								},
								{
									"key": "domain",
									"value": "Internal"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET  Organization_Administrator Role Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "50ac05de-9ac8-4432-961d-48127c43195b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"pm.environment.set(\"OrgAdminRoleId\", jsonData.Resources[0].id);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "dc9df31c-13cc-451c-8df8-2bae5d122232",
								"exec": [
									"let OrgAdminRoleName = 'Organization_Administrator'",
									"pm.environment.set('OrgAdminRoleName',OrgAdminRoleName)"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{baseurl}}/scim2/Groups?filter=displayName+eq+{{OrgAdminRoleName}}&domain=Internal",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"scim2",
								"Groups"
							],
							"query": [
								{
									"key": "filter",
									"value": "displayName+eq+{{OrgAdminRoleName}}"
								},
								{
									"key": "domain",
									"value": "Internal"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET  Organization_Viewer Role Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0f72b932-59f7-4a9c-a89e-0dcbcfb6beb6",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"pm.environment.set(\"OrgViewerRoleId\", jsonData.Resources[0].id);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d0781de1-7448-41f5-8601-996afe70fd59",
								"exec": [
									"let OrgViewerRoleName = 'Organization_Viewer'",
									"pm.environment.set('OrgViewerRoleName',OrgViewerRoleName)"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{baseurl}}/scim2/Groups?filter=displayName+eq+{{OrgViewerRoleName}}&domain=Internal",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"scim2",
								"Groups"
							],
							"query": [
								{
									"key": "filter",
									"value": "displayName+eq+{{OrgViewerRoleName}}"
								},
								{
									"key": "domain",
									"value": "Internal"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET  AdminRole_Administrator Role Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "111b6250-0441-425a-b9dd-e46fb324d371",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"pm.environment.set(\"AdminRoleAdministratorRoleId\", jsonData.Resources[0].id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6fe4d1b7-b3b2-4713-a43e-94e99b9cf3a5",
								"exec": [
									"let AdminRoleAdministratorRoleName = 'AdminRole_Administrator'",
									"pm.environment.set('AdminRoleAdministratorRoleName',AdminRoleAdministratorRoleName)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/scim2/Groups?filter=displayName+eq+{{AdminRoleAdministratorRoleName}}&domain=Internal",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"scim2",
								"Groups"
							],
							"query": [
								{
									"key": "filter",
									"value": "displayName+eq+{{AdminRoleAdministratorRoleName}}"
								},
								{
									"key": "domain",
									"value": "Internal"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET  Role_Administrator Role Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "310c746d-298b-4b43-bfe0-f207e313dc35",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"pm.environment.set(\"RoleAdminRoleId\", jsonData.Resources[0].id);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8e40a082-042a-4ad3-b467-3ec3142d8bf0",
								"exec": [
									"let RoleAdminRoleName = 'Role_Administrator'",
									"pm.environment.set('RoleAdminRoleName',RoleAdminRoleName)"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{baseurl}}/scim2/Groups?filter=displayName+eq+{{RoleAdminRoleName}}&domain=Internal",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"scim2",
								"Groups"
							],
							"query": [
								{
									"key": "filter",
									"value": "displayName+eq+{{RoleAdminRoleName}}"
								},
								{
									"key": "domain",
									"value": "Internal"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET  Role_Viewer Role Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f006840c-6f10-4423-bbce-ae5188d0f8d2",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"pm.environment.set(\"RoleViewerRoleId\", jsonData.Resources[0].id);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2a2846ee-db37-4f3e-8fcb-f152a94c2e67",
								"exec": [
									"let RoleViewerRoleName = 'Role_Viewer'",
									"pm.environment.set('RoleViewerRoleName',RoleViewerRoleName)"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{baseurl}}/scim2/Groups?filter=displayName+eq+{{RoleViewerRoleName}}&domain=Internal",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"scim2",
								"Groups"
							],
							"query": [
								{
									"key": "filter",
									"value": "displayName+eq+{{RoleViewerRoleName}}"
								},
								{
									"key": "domain",
									"value": "Internal"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign permissions to the User_Administrator role",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7400a812-d9d7-4dbb-8271-12ebd9acb55b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response includes specified elements\", function () {",
									"    let response = pm.response.json();",
									"    pm.expect(response).to.have.instanceOf(Array);",
									"    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[ \n\"/permission/admin/manage/identity/usermgt\",\n\"/permission/admin/manage/identity/organizationmgt/view\",\n\"/permission/admin/manage/identity/rolemgt/view\",\n\"/permission/admin/manage/identity/userrolemgt/view\"\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/scim2/Groups/{{UserAdminRoleId}}/permissions",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"scim2",
								"Groups",
								"{{UserAdminRoleId}}",
								"permissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign permissions to the User_Viewer role",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "babcd0f1-e107-4766-9ed4-b43565997bc6",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response includes specified elements\", function () {",
									"    let response = pm.response.json();",
									"    pm.expect(response).to.have.instanceOf(Array);",
									"    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[ \n\"/permission/admin/manage/identity/organizationmgt/view\",\n\"/permission/admin/manage/identity/organizationmgt/list\",\n\"/permission/admin/manage/identity/rolemgt/view\",\n\"/permission/admin/manage/identity/userrolemgt/view\"\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/scim2/Groups/{{UserViewerRoleId}}/permissions",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"scim2",
								"Groups",
								"{{UserViewerRoleId}}",
								"permissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign permissions to the Organization_Administrator role",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "846e389d-595d-4e2e-87e2-26146aecd160",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response includes specified elements\", function () {",
									"    let response = pm.response.json();",
									"    pm.expect(response).to.have.instanceOf(Array);",
									"    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[ \n\"/permission/admin/manage/identity/usermgt/view\",\n\"/permission/admin/manage/identity/usermgt/list\",\n\"/permission/admin/manage/identity/organizationmgt/create\",\n\"/permission/admin/manage/identity/organizationmgt/view\",\n\"/permission/admin/manage/identity/organizationmgt/update\",\n\"/permission/admin/manage/identity/organizationmgt/delete\",\n\"/permission/admin/manage/identity/rolemgt/view\",\n\"/permission/admin/manage/identity/userrolemgt/view\"\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/scim2/Groups/{{OrgAdminRoleId}}/permissions",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"scim2",
								"Groups",
								"{{OrgAdminRoleId}}",
								"permissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign permissions to the Organization_Viewer role",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9158654c-a277-42f1-a5cf-3bfbd8531d3f",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response includes specified elements\", function () {",
									"    let response = pm.response.json();",
									"    pm.expect(response).to.have.instanceOf(Array);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[ \n\"/permission/admin/manage/identity/usermgt/view\",\n\"/permission/admin/manage/identity/usermgt/list\",\n\"/permission/admin/manage/identity/organizationmgt/view\",\n\"/permission/admin/manage/identity/rolemgt/view\"\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/scim2/Groups/{{OrgViewerRoleId}}/permissions",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"scim2",
								"Groups",
								"{{OrgViewerRoleId}}",
								"permissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign permissions to the  AdminRole_Administrator role",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "70db25d8-4038-4baa-bbc4-bf4f48f2284b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response includes specified elements\", function () {",
									"    let response = pm.response.json();",
									"    pm.expect(response).to.have.instanceOf(Array);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[ \n\"/permission/admin/manage/identity/usermgt/view\",\n\"/permission/admin/manage/identity/usermgt/list\",\n\"/permission/admin/manage/identity/organizationmgt/view\",\n\"/permission/admin/manage/identity/rolemgt/view\",\n\"/permission/admin/manage/identity/userrolemgt/view\",\n\"/permission/admin/manage/identity/userrolemgt/create\",\n\"/permission/admin/manage/identity/userrolemgt/delete\"\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/scim2/Groups/{{AdminRoleAdministratorRoleId}}/permissions",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"scim2",
								"Groups",
								"{{AdminRoleAdministratorRoleId}}",
								"permissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign permissions to the Role_Administrator role",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "68da1fa0-1559-4f24-9687-0a81b062ca61",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response includes specified elements\", function () {",
									"    let response = pm.response.json();",
									"    pm.expect(response).to.have.instanceOf(Array);",
									"    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[ \n\"/permission/admin/manage/identity/usermgt/view\",\n\"/permission/admin/manage/identity/usermgt/list\",\n\"/permission/admin/manage/identity/organizationmgt/view\",\n\"/permission/admin/manage/identity/userrolemgt/view\",\n\"/permission/admin/manage/identity/rolemgt\"\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/scim2/Groups/{{RoleAdminRoleId}}/permissions",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"scim2",
								"Groups",
								"{{RoleAdminRoleId}}",
								"permissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign permissions to the Role_Viewer role",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "84b879ef-2875-482f-bad0-700aff4319be",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response includes specified elements\", function () {",
									"    let response = pm.response.json();",
									"    pm.expect(response).to.have.instanceOf(Array);",
									"    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[ \n\"/permission/admin/manage/identity/usermgt/view\",\n\"/permission/admin/manage/identity/usermgt/list\",\n\"/permission/admin/manage/identity/organizationmgt/view\",\n\"/permission/admin/manage/identity/rolemgt/view\"\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/scim2/Groups/{{RoleViewerRoleId}}/permissions",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"scim2",
								"Groups",
								"{{RoleViewerRoleId}}",
								"permissions"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Tests",
			"item": [
				{
					"name": "List displayNames of Internal Roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "11eddba8-136f-473b-b7ce-531899110e38",
								"exec": [
									"let response = pm.response.json();",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response includes specific items\", function () {",
									"    pm.expect(response).to.have.ownProperty(\"totalResults\"); ",
									"    pm.expect(response).to.have.ownProperty(\"schemas\"); ",
									"    pm.expect(response.Resources).to.have.instanceOf(Array);",
									"    pm.expect(response.Resources).to.have.members;",
									"});",
									"",
									"pm.test(\"Each resource should have 2 keys\", () => {",
									"    _.each(pm.response.Resources, (item) => {",
									"        pm.expect(item).to.be.an('object').and.have.keys(['id', 'displayName'])",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/scim2/Groups?domain=Internal&attributes=displayName",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"scim2",
								"Groups"
							],
							"query": [
								{
									"key": "domain",
									"value": "Internal"
								},
								{
									"key": "attributes",
									"value": "displayName"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List all orgs in the fresh pack - only ROOT should be returned",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd8aa53c-42b8-482e-a07e-85f034f09e23",
								"exec": [
									" let response = pm.response.json();",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Return non-empty array\", function () {",
									"    pm.expect(response).to.have.instanceOf(Array);",
									"    pm.expect(response).to.have.members;",
									"});",
									"",
									"pm.test(\"Response includes root organization\", function () {",
									"   pm.environment.set(\"ROOTOrgId\", response[0].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations?includePermissions=true",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations"
							],
							"query": [
								{
									"key": "includePermissions",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET ROOT Organization by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6d4fbc97-ef54-4aa0-b195-aa0341f5cc93",
								"exec": [
									"let response = pm.response.json();",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response includes specified elements\", function () {",
									"    pm.expect(response).to.have.ownProperty(\"parent\"); ",
									"    pm.expect(response.id).to.equal(pm.environment.get(\"ROOTOrgId\"));",
									"    pm.expect(response).to.have.ownProperty(\"meta\"); ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations/{{ROOTOrgId}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations",
								"{{ROOTOrgId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Organization under ROOT - unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "76fa87f8-a070-4371-be1d-9261c30fca15",
								"exec": [
									"pm.test(\"Unauthorized organization creation\", function () {",
									"     pm.response.to.have.status(403);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c40876b3-92e4-429d-abf3-d90b29fe9dbb",
								"exec": [
									"let OrgName= 'wso2'",
									"pm.environment.set('OrgName',OrgName)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{OrgName}}\",\n    \"displayName\": \"WSO2\",\n    \"description\": \"LK organization\",\n    \"attributes\": [\n        {\n            \"key\": \"Type\",\n            \"value\": \"partner\"\n        },\n        {\n            \"key\": \"Exp\",\n            \"value\": \"2021\"\n        }\n    ],\n    \"userStoreConfigs\": [\n        {\n            \"key\": \"RDN\",\n            \"value\": \"{{OrgName}}\"\n        },\n        {\n            \"key\": \"USER_STORE_DOMAIN\",\n            \"value\": \"PRIMARY\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign Organization_Administrator role to admin user against ROOT",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9ddc298c-1428-4e3f-8207-530b7d5cca84",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"roleId\": \"{{OrgAdminRoleId}}\",\n   \"users\": [\n     {\n        \"userId\": \"{{adminId}}\",\n        \"includeSubOrgs\": \"false\"\n     }\n   ]\n }\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations/{{ROOTOrgId}}/roles",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations",
								"{{ROOTOrgId}}",
								"roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Organization under ROOT",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "39f1c351-2f68-433c-9512-bbf0e730a459",
								"exec": [
									"let response = pm.response.json();",
									"pm.test(\"Successful POST request\", function () {",
									"     pm.response.to.have.status(201);",
									"});",
									"pm.environment.set(\"ParentOrg\", response.id);",
									"",
									"pm.test(\"Response includes specified elements\", function () {",
									"    let orgName = pm.environment.get('OrgName');",
									"    pm.expect(response).to.have.ownProperty(\"name\"); ",
									"    pm.expect(response.name).to.equal(orgName);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "df09346d-6698-44c5-b983-68abc4767610",
								"exec": [
									"let OrgName= 'wso2'",
									"pm.environment.set('OrgName',OrgName)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{OrgName}}\",\n    \"displayName\": \"WSO2\",\n    \"description\": \"LK organization\",\n    \"attributes\": [\n        {\n            \"key\": \"Type\",\n            \"value\": \"partner\"\n        },\n        {\n            \"key\": \"Exp\",\n            \"value\": \"2021\"\n        }\n    ],\n    \"userStoreConfigs\": [\n        {\n            \"key\": \"RDN\",\n            \"value\": \"{{OrgName}}\"\n        },\n        {\n            \"key\": \"USER_STORE_DOMAIN\",\n            \"value\": \"PRIMARY\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign User_Administrator role to admin user against ROOT",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3152db17-7ff0-4fad-bbaf-22e3deda63bc",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"roleId\": \"{{UserAdminRoleId}}\",\n   \"users\": [\n     {\n        \"userId\": \"{{adminId}}\",\n        \"includeSubOrgs\": \"true\"\n     }\n   ]\n }\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations/{{ROOTOrgId}}/roles",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations",
								"{{ROOTOrgId}}",
								"roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User1(smith) in parent org",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "be3195ae-4dc0-4225-b55d-390188ba9e91",
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"pm.environment.set(\"UserInParentOrg\", jsonData.id);",
									"",
									"pm.test(\"Response includes specified elements\", function () {",
									"    let response = pm.response.json();",
									"    pm.expect(response).to.have.ownProperty(\"name\"); ",
									"    pm.expect(response.name.givenName).to.equal(\"Smith\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d6978b1f-85d1-4528-a9c1-0898cec8ae87",
								"exec": [
									"let UserNameOfUserInParentOrg= 'smith'",
									"pm.environment.set('UserNameOfUserInParentOrg',UserNameOfUserInParentOrg)",
									"",
									"let PasswordOfUserInParentOrg = 'smith123'",
									"pm.environment.set('PasswordOfUserInParentOrg',PasswordOfUserInParentOrg)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"schemas\":[],\n    \"name\":{\n        \"givenName\":\"Smith\",\n        \"familyName\":\"Paul\"\n    },\n    \"userName\":\"{{UserNameOfUserInParentOrg}}\",\n    \"password\":\"{{PasswordOfUserInParentOrg}}\",\n     \"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\": {\n        \"organization\": {\n            \"name\": \"{{OrgName}}\"\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/scim2/Users",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"scim2",
								"Users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Organization under ROOT by unauthorized user(smith)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3606d124-a0e5-4784-8475-e8a8e03b580e",
								"exec": [
									"pm.test(\"Forbidden POST request to create an organization\", function () {",
									"     pm.response.to.have.status(403);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "721cc24e-31fa-454c-a24d-b2b5243b53ce",
								"exec": [
									"let OrgName1= 'wso2-inc'",
									"pm.environment.set('OrgName1',OrgName1)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PasswordOfUserInParentOrg}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{UserNameOfUserInParentOrg}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{OrgName1}}\",\n    \"displayName\": \"WSO2\",\n    \"description\": \"LK organization\",\n    \"attributes\": [\n        {\n            \"key\": \"Type\",\n            \"value\": \"partner\"\n        },\n        {\n            \"key\": \"Exp\",\n            \"value\": \"2021\"\n        }\n    ],\n    \"userStoreConfigs\": [\n        {\n            \"key\": \"RDN\",\n            \"value\": \"{{OrgName1}}\"\n        },\n        {\n            \"key\": \"USER_STORE_DOMAIN\",\n            \"value\": \"PRIMARY\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign Organization_Administrator role to new user(smith) against the Parent Org with include suborgs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6ef02415-a9ea-423b-9702-e4d38f7a9229",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"roleId\": \"{{OrgAdminRoleId}}\",\n   \"users\": [\n     {\n        \"userId\": \"{{UserInParentOrg}}\",\n        \"includeSubOrgs\": \"true\"\n     }\n   ]\n }\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations/{{ParentOrg}}/roles",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations",
								"{{ParentOrg}}",
								"roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Organization(SubOrg1) under Parent by created user(smith) - Since he got org creation permission against root with include sub-orgs tihs request should be passed",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a1eb530f-a1a9-46fa-8176-734fb10d0b06",
								"exec": [
									"let response = pm.response.json();",
									"pm.test(\"Successful POST request\", function () {",
									"     pm.response.to.have.status(201);",
									"});",
									"pm.environment.set(\"SubOrg1\", response.id);",
									"",
									"pm.test(\"Response includes specified elements\", function () {",
									"    let OrgName1 = pm.environment.get('OrgName1');",
									"    pm.expect(response).to.have.ownProperty(\"name\"); ",
									"    pm.expect(response.name).to.equal(OrgName1);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "10bfdf2f-5de8-4d3b-be4f-05581c8b2fc2",
								"exec": [
									"let OrgName1= 'wso2-inc'",
									"pm.environment.set('OrgName1',OrgName1)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PasswordOfUserInParentOrg}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{UserNameOfUserInParentOrg}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{OrgName1}}\",\n    \"displayName\": \"WSO2\",\n    \"parentId\": \"{{ParentOrg}}\",\n    \"description\": \"LK organization\",\n    \"attributes\": [\n        {\n            \"key\": \"Type\",\n            \"value\": \"partner\"\n        },\n        {\n            \"key\": \"Exp\",\n            \"value\": \"2021\"\n        }\n    ],\n    \"userStoreConfigs\": [\n        {\n            \"key\": \"RDN\",\n            \"value\": \"{{OrgName1}}\"\n        },\n        {\n            \"key\": \"USER_STORE_DOMAIN\",\n            \"value\": \"PRIMARY\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "List all organization by user(User1 - smith)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "be2b2161-5107-4262-a99e-095e57250a35",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PasswordOfUserInParentOrg}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{UserNameOfUserInParentOrg}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations?includePermissions=true",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations"
							],
							"query": [
								{
									"key": "includePermissions",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Organization under ROOT with an existing name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d594d1fb-21a0-440f-a77c-31264904fe2f",
								"exec": [
									"pm.test(\"Conflicting POST request\", function () {",
									"     pm.response.to.have.status(409);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "64584736-a2a8-4e33-9a1b-b2aef7e084ce",
								"exec": [
									"/*pm..environment.set(\"randomOrgName\", _.$randomORGName);*/",
									"let OrgName= 'wso2'",
									"pm.environment.set('OrgName',OrgName)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{OrgName}}\",\n    \"displayName\": \"WSO2\",\n    \"description\": \"LK organization\",\n    \"attributes\": [\n        {\n            \"key\": \"Type\",\n            \"value\": \"partner\"\n        },\n        {\n            \"key\": \"Exp\",\n            \"value\": \"2021\"\n        }\n    ],\n    \"userStoreConfigs\": [\n        {\n            \"key\": \"RDN\",\n            \"value\": \"{{OrgName}}\"\n        },\n        {\n            \"key\": \"USER_STORE_DOMAIN\",\n            \"value\": \"PRIMARY\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Organization which name contains special charcaters",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "410244ed-8f9f-4a23-af43-bca35e8fb3bf",
								"exec": [
									"let response = pm.response.json();",
									"pm.test(\"Succesfull POST request\", function () {",
									"     pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response includes specified elements\", function () {",
									"    let OrgNameWithSpecialChar = pm.environment.get('OrgNameWithSpecialChar');",
									"    pm.expect(response).to.have.ownProperty(\"name\"); ",
									"    pm.expect(response.name).to.equal(OrgNameWithSpecialChar);",
									"    pm.environment.set(\"OrgContainsSpecialCharInName\", response.id);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4d293df0-2154-4c9e-8371-3bee11fda730",
								"exec": [
									"let OrgNameWithSpecialChar = 'wso#@$^&*2'",
									"pm.environment.set('OrgNameWithSpecialChar',OrgNameWithSpecialChar)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{OrgNameWithSpecialChar}}\",\n    \"displayName\": \"WSO2\",\n    \"description\": \"LK organization\",\n    \"attributes\": [\n        {\n            \"key\": \"Type\",\n            \"value\": \"partner\"\n        },\n        {\n            \"key\": \"Exp\",\n            \"value\": \"2021\"\n        }\n    ],\n    \"userStoreConfigs\": [\n        {\n            \"key\": \"RDN\",\n            \"value\": \"{{OrgNameWithSpecialChar}}\"\n        },\n        {\n            \"key\": \"USER_STORE_DOMAIN\",\n            \"value\": \"PRIMARY\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Organization which name contains space",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7abfdb9e-8296-4b3b-a87d-55a0f378464e",
								"exec": [
									"let response = pm.response.json();",
									"pm.test(\"Succesfull POST request\", function () {",
									"     pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response includes specified elements\", function () {",
									"    let OrgNameWithSpace = pm.environment.get('OrgNameWithSpace');",
									"    pm.expect(response).to.have.ownProperty(\"name\"); ",
									"    pm.expect(response.name).to.equal(OrgNameWithSpace);",
									"    pm.environment.set(\"OrgContainsSpacceInName\", response.id);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "46a39129-95b5-4a5c-8695-044ab959248e",
								"exec": [
									"let OrgNameWithSpace = 'wso2 org'",
									"pm.environment.set('OrgNameWithSpace',OrgNameWithSpace)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{OrgNameWithSpace}}\",\n    \"displayName\": \"WSO2\",\n    \"description\": \"LK organization\",\n    \"attributes\": [\n        {\n            \"key\": \"Type\",\n            \"value\": \"partner\"\n        },\n        {\n            \"key\": \"Exp\",\n            \"value\": \"2021\"\n        }\n    ],\n    \"userStoreConfigs\": [\n        {\n            \"key\": \"RDN\",\n            \"value\": \"{{OrgNameWithSpace}}\"\n        },\n        {\n            \"key\": \"USER_STORE_DOMAIN\",\n            \"value\": \"PRIMARY\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Organization without name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8fb605bf-8ff4-4424-a031-ee7c1b9cc911",
								"exec": [
									"pm.test(\"Bad request on organization creation\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response includes specified elements\", function () {",
									"    let response = pm.response.json();",
									"    pm.expect(response).to.have.ownProperty(\"code\"); ",
									"    pm.expect(response.code).to.equal(\"ORGMGT_00001\");",
									"    pm.expect(response).to.have.ownProperty(\"message\"); ",
									"    pm.expect(response.message).to.equal(\"Bad Request\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"\",\n    \"displayName\": \"WSO2\",\n    \"description\": \"LK organization\",\n    \"attributes\": [\n        {\n            \"key\": \"Type\",\n            \"value\": \"partner\"\n        },\n        {\n            \"key\": \"Exp\",\n            \"value\": \"2021\"\n        }\n    ],\n    \"userStoreConfigs\": [\n        {\n            \"key\": \"RDN\",\n            \"value\": \"{{OrgName}}\"\n        },\n        {\n            \"key\": \"USER_STORE_DOMAIN\",\n            \"value\": \"PRIMARY\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Organization without a displayName",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05505078-5693-41a3-9116-252aa03476f6",
								"exec": [
									"pm.test(\"Successful POST returns 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"if(pm.response.to.have.status(201)) {",
									"    let response = pm.response.json();",
									"    pm.environment.set(\"OrgWithoutDisplayName\", response.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"TESTORG\",\n    \"displayName\": \"\",\n    \"description\": \"LK organization\",\n    \"attributes\": [\n        {\n            \"key\": \"Type\",\n            \"value\": \"partner\"\n        },\n        {\n            \"key\": \"Exp\",\n            \"value\": \"2021\"\n        }\n    ],\n    \"userStoreConfigs\": [\n        {\n            \"key\": \"RDN\",\n            \"value\": \"TESTORG\"\n        },\n        {\n            \"key\": \"USER_STORE_DOMAIN\",\n            \"value\": \"PRIMARY\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User2 in parent org",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f2625c65-24d5-44ba-bc1d-f1ed4ac6c2fb",
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"pm.environment.set(\"User2InParentOrg\", jsonData.id);",
									"",
									"pm.test(\"Response includes specified elements\", function () {",
									"    let response = pm.response.json();",
									"    pm.expect(response).to.have.ownProperty(\"name\"); ",
									"    pm.expect(response.name.givenName).to.equal(\"Kim\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "316fc4ec-3ce3-4fbe-9ef3-ac12593ff18e",
								"exec": [
									"let UserNameOfUserInParentOrg= 'kim'",
									"pm.environment.set('UserNameOfUser2InParentOrg',UserNameOfUserInParentOrg)",
									"",
									"let PasswordOfUserInParentOrg = 'kim123'",
									"pm.environment.set('PasswordOfUser2InParentOrg',PasswordOfUserInParentOrg)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"schemas\":[],\n    \"name\":{\n        \"givenName\":\"Kim\",\n        \"familyName\":\"Jhon\"\n    },\n    \"userName\":\"{{UserNameOfUser2InParentOrg}}\",\n    \"password\":\"{{PasswordOfUser2InParentOrg}}\",\n     \"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\": {\n        \"organization\": {\n            \"name\": \"{{OrgName}}\"\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/scim2/Users",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"scim2",
								"Users"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Organization by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ffb744e3-aaa9-40c0-a173-54a2c89efd34",
								"exec": [
									"let response = pm.response.json();",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response includes specified elements\", function () {",
									"    pm.expect(response).to.have.ownProperty(\"parent\"); ",
									"    pm.expect(response.parent.id).to.equal(pm.environment.get(\"ROOTOrgId\"));",
									"    pm.expect(response.parent.name).to.equal(\"ROOT\");",
									"",
									"    pm.expect(response).to.have.ownProperty(\"meta\"); ",
									"    pm.expect(response).to.have.ownProperty(\"attributes\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations/{{ParentOrg}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations",
								"{{ParentOrg}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Organization by id by unauthorized user(User2 - kim)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "57ae4e4c-daf4-47db-a9d6-192ed88baa54",
								"exec": [
									"pm.test(\"View organization by unauthorized user\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PasswordOfUser2InParentOrg}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{UserNameOfUser2InParentOrg}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations/{{ParentOrg}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations",
								"{{ParentOrg}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "List all organization by unauthorized user(User2 - kim)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "55e39b74-3f95-45d3-ad02-01715cfffe2e",
								"exec": [
									"pm.test(\"View organization by unauthorized user\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PasswordOfUser2InParentOrg}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{UserNameOfUser2InParentOrg}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign Organization_Viewer role to user2(kim) against subOrg1-(include sub-org false)  by User1(smith)- no permission",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d561bfbd-f1ee-47b0-93e8-53230005edab",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PasswordOfUserInParentOrg}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{UserNameOfUserInParentOrg}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"roleId\": \"{{OrgViewerRoleId}}\",\n   \"users\": [\n     {\n        \"userId\": \"{{User2InParentOrg}}\",\n        \"includeSubOrgs\": \"false\"\n     }\n   ]\n }\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations/{{SubOrg1}}/roles",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations",
								"{{SubOrg1}}",
								"roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign AdminRole_Administrator role to new user(smith) against the Parent Org with include suborgs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7dd51af1-b0f6-4997-96de-93097393588a",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"roleId\": \"{{AdminRoleAdministratorRoleId}}\",\n   \"users\": [\n     {\n        \"userId\": \"{{UserInParentOrg}}\",\n        \"includeSubOrgs\": \"true\"\n     }\n   ]\n }\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations/{{ParentOrg}}/roles",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations",
								"{{ParentOrg}}",
								"roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign Organization_Viewer role to user2(kim) against subOrg1-(include sub-org false) by User1(smith)  with AdminRoleAdministrator role",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bde2f370-589f-40c7-8916-8b336a899d4a",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PasswordOfUserInParentOrg}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{UserNameOfUserInParentOrg}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"roleId\": \"{{OrgViewerRoleId}}\",\n   \"users\": [\n     {\n        \"userId\": \"{{User2InParentOrg}}\",\n        \"includeSubOrgs\": \"false\"\n     }\n   ]\n }\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations/{{SubOrg1}}/roles",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations",
								"{{SubOrg1}}",
								"roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "List all organization by user(User2 - kim)  - Return only the orgs which he has permission. Should return only subOrg1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1a383fe8-dca0-4ba0-a4c2-a112a928dba5",
								"exec": [
									"let response = pm.response.json();",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response includes only one organization\", function () {",
									"    pm.expect(response).to.have.instanceOf(Array);",
									"    pm.expect(response).to.have.members;",
									"    pm.expect(pm.response.json().length).to.eq(1);",
									"    pm.environment.set(\"PermitedOrgToView\", response[0].id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PasswordOfUser2InParentOrg}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{UserNameOfUser2InParentOrg}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations?includePermissions=true",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations"
							],
							"query": [
								{
									"key": "includePermissions",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET organization by id by user(User2 - kim)  has only Organization_View",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e83cedf4-6527-4406-8fec-4a98b5918502",
								"exec": [
									"let response = pm.response.json();",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PasswordOfUser2InParentOrg}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{UserNameOfUser2InParentOrg}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations/{{PermitedOrgToView}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations",
								"{{PermitedOrgToView}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Organizations with Filter by Orgname order by DESC",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "026301e3-0f79-4b6f-b8d8-9a7defbc9198",
								"exec": [
									"let response = pm.response.json();\r",
									"var _ = require('lodash');\r",
									"pm.test(\"Verify organizations list has returned\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an non-empty array\", function () {\r",
									"    pm.expect(response).to.have.instanceOf(Array);\r",
									"    pm.expect(response).to.have.members;\r",
									"});\r",
									"\r",
									"pm.test('Orgnames are in descending order', () => {\r",
									"    var expectedSortedOrder = _.orderBy(response, ['name'],['desc']);\r",
									"    pm.expect(response).to.eql(expectedSortedOrder);    \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Cache-Control",
								"type": "text",
								"value": "no-cache"
							}
						],
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations?sortBy=name&sortOrder=DESC",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "name"
								},
								{
									"key": "sortOrder",
									"value": "DESC"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Organizations with Filter by Orgname order by ASC",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "24426e75-e76e-4ae5-a444-e907aa82fd6e",
								"exec": [
									"let response = pm.response.json();\r",
									"var _ = require('lodash');\r",
									"\r",
									"pm.test(\"Verify organizations list has returned\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an non-empty array\", function () {\r",
									"    pm.expect(response).to.have.instanceOf(Array);\r",
									"    pm.expect(response).to.have.members;\r",
									"});\r",
									"\r",
									"pm.test('Orgnames are in ascending order', () => {\r",
									"    var expectedSortedOrder = _.orderBy(response, ['name'],['asc']);\r",
									"    pm.expect(response).to.eql(expectedSortedOrder);    \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Cache-Control",
								"type": "text",
								"value": "no-cache"
							}
						],
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations?sortBy=name&sortOrder=ASC",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "name"
								},
								{
									"key": "sortOrder",
									"value": "ASC"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Organizations with Filter without sortBy Param order by ASC",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d03e2554-7279-4d96-912a-5f5af248d0db",
								"exec": [
									"let response = pm.response.json();\r",
									"var _ = require('lodash');\r",
									"\r",
									"pm.test(\"Verify organizations list has returned\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an non-empty array\", function () {\r",
									"    pm.expect(response).to.have.instanceOf(Array);\r",
									"    pm.expect(response).to.have.members;\r",
									"});\r",
									"\r",
									"pm.test('Orgnames are in ascending order', () => {\r",
									"    var expectedSortedOrder = _.orderBy(response, ['name'],['asc']);\r",
									"    pm.expect(response).to.eql(expectedSortedOrder);    \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Cache-Control",
								"type": "text",
								"value": "no-cache"
							}
						],
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations?sortOrder=ASC",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "sortOrder",
									"value": "ASC"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Organizations with Filter by name - case insensitive search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9ab28413-9147-4402-ba2a-eddef1bb4d1c",
								"exec": [
									"pm.test(\"Verify organizations list has returned\", function () {\r",
									"pm.test(\"Uppercase search results should be returned \", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"WSO2\");\r",
									"});\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"lowercase search results should be returned\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"wso2\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an non-empty array\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.instanceOf(Array);\r",
									"    pm.expect(pm.response.json()).to.have.members;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Cache-Control",
								"type": "text",
								"value": "no-cache"
							}
						],
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations?$filter=name%20eq%20%27WSO2%27",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations"
							],
							"query": [
								{
									"key": "$filter",
									"value": "name%20eq%20%27WSO2%27"
								}
							]
						}
					},
					"response": [
						{
							"name": "Get Organizations with Filter by displayname eq \"\"",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cache-Control",
										"type": "text",
										"value": "no-cache"
									}
								],
								"url": {
									"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations?$filter=name%20eq%20%27425ORG",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"identity",
										"organization-mgt",
										"v1.0",
										"organizations"
									],
									"query": [
										{
											"key": "$filter",
											"value": "name%20eq%20%27425ORG"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Date",
									"value": "Fri, 09 Oct 2020 10:11:35 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "close"
								},
								{
									"key": "Server",
									"value": "WSO2 Carbon Server"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": \"ORGMGT_00050\",\n    \"message\": \"Internal Server Error\",\n    \"description\": \"Internal Server Error\"\n}"
						}
					]
				},
				{
					"name": "Get Organizations with Filter by name eq \"\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9d4ebfac-7f3c-4546-af5b-077078df723d",
								"exec": [
									"pm.test(\"Verify organizations list has returned\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Cache-Control",
								"type": "text",
								"value": "no-cache"
							}
						],
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations?$filter=name%20eq%20%27615ORG%27",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations"
							],
							"query": [
								{
									"key": "$filter",
									"value": "name%20eq%20%27615ORG%27"
								}
							]
						}
					},
					"response": [
						{
							"name": "Get Organizations with Filter by displayname eq \"\"",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cache-Control",
										"type": "text",
										"value": "no-cache"
									}
								],
								"url": {
									"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations?$filter=name%20eq%20%27425ORG",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"identity",
										"organization-mgt",
										"v1.0",
										"organizations"
									],
									"query": [
										{
											"key": "$filter",
											"value": "name%20eq%20%27425ORG"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Date",
									"value": "Fri, 09 Oct 2020 10:11:35 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "close"
								},
								{
									"key": "Server",
									"value": "WSO2 Carbon Server"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": \"ORGMGT_00050\",\n    \"message\": \"Internal Server Error\",\n    \"description\": \"Internal Server Error\"\n}"
						}
					]
				},
				{
					"name": "Get Organizations with Filter by a name with spaces",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7cac03ac-301c-4408-a438-4fbd40d07372",
								"exec": [
									"pm.test(\"Verify organizations list has returned\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Cache-Control",
								"type": "text",
								"value": "no-cache"
							}
						],
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations?$filter=name%20eq%20%27wso2%20org%27",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations"
							],
							"query": [
								{
									"key": "$filter",
									"value": "name%20eq%20%27wso2%20org%27"
								}
							]
						}
					},
					"response": [
						{
							"name": "Get Organizations with Filter by displayname eq \"\"",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cache-Control",
										"type": "text",
										"value": "no-cache"
									}
								],
								"url": {
									"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations?$filter=name%20eq%20%27425ORG",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"identity",
										"organization-mgt",
										"v1.0",
										"organizations"
									],
									"query": [
										{
											"key": "$filter",
											"value": "name%20eq%20%27425ORG"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Date",
									"value": "Fri, 09 Oct 2020 10:11:35 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "close"
								},
								{
									"key": "Server",
									"value": "WSO2 Carbon Server"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": \"ORGMGT_00050\",\n    \"message\": \"Internal Server Error\",\n    \"description\": \"Internal Server Error\"\n}"
						}
					]
				},
				{
					"name": "Get Organizations with Filter by AND operator - no results",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ec8f2aec-04f8-4fa6-bf12-cca6c755f45e",
								"exec": [
									"let response = pm.response.json();\r",
									"pm.test(\"Verify organizations list has returned\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Return empty array\", function () {\r",
									"    pm.expect(response).to.have.instanceOf(Array);\r",
									"    pm.expect(response).to.have.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Cache-Control",
								"type": "text",
								"value": "no-cache"
							}
						],
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations?$filter=name%20eq%20%27GAYANIORG12%27and%20attributeValue%20eq%20%270000%27",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations"
							],
							"query": [
								{
									"key": "$filter",
									"value": "name%20eq%20%27GAYANIORG12%27and%20attributeValue%20eq%20%270000%27"
								}
							]
						}
					},
					"response": [
						{
							"name": "Get Organizations with Filter by displayname eq \"\"",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cache-Control",
										"type": "text",
										"value": "no-cache"
									}
								],
								"url": {
									"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations?$filter=name%20eq%20%27425ORG",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"identity",
										"organization-mgt",
										"v1.0",
										"organizations"
									],
									"query": [
										{
											"key": "$filter",
											"value": "name%20eq%20%27425ORG"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Date",
									"value": "Fri, 09 Oct 2020 10:11:35 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "close"
								},
								{
									"key": "Server",
									"value": "WSO2 Carbon Server"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": \"ORGMGT_00050\",\n    \"message\": \"Internal Server Error\",\n    \"description\": \"Internal Server Error\"\n}"
						}
					]
				},
				{
					"name": "Get Organizations with Filter by AND operaror - have result",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f0feccdc-e3ca-425a-a899-31f67bf485c6",
								"exec": [
									"let response = pm.response.json();\r",
									"pm.test(\"Verify organizations list has returned\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Return non-empty array\", function () {\r",
									"    pm.expect(response).to.have.instanceOf(Array);\r",
									"    pm.expect(response).to.have.members;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Cache-Control",
								"type": "text",
								"value": "no-cache"
							}
						],
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations?$filter=name%20eq%20%27{{OrgName}}%27and%20displayName%20eq%20%27WSO2%27",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations"
							],
							"query": [
								{
									"key": "$filter",
									"value": "name%20eq%20%27{{OrgName}}%27and%20displayName%20eq%20%27WSO2%27"
								}
							]
						}
					},
					"response": [
						{
							"name": "Get Organizations with Filter by AND operator",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cache-Control",
										"type": "text",
										"value": "no-cache"
									}
								],
								"url": {
									"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations?$filter=name%20eq%20%27425ORG%27or%20attributeValue%20eq%20%27BYOXFED%27",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"identity",
										"organization-mgt",
										"v1.0",
										"organizations"
									],
									"query": [
										{
											"key": "$filter",
											"value": "name%20eq%20%27425ORG%27or%20attributeValue%20eq%20%27BYOXFED%27"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Date",
									"value": "Fri, 09 Oct 2020 11:00:32 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Server",
									"value": "WSO2 Carbon Server"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": \"1fb49c23-e3cc-49f7-a2af-d7ebe5e2e0fa\",\n        \"name\": \"485ORG\",\n        \"displayName\": \"\",\n        \"description\": \"EU organization\",\n        \"status\": \"ACTIVE\",\n        \"parent\": {\n            \"id\": \"ROOT\",\n            \"ref\": \"\",\n            \"name\": \"ROOT\",\n            \"displayName\": \"ROOT\"\n        },\n        \"meta\": {\n            \"created\": \"2020-10-08 18:40:15.064\",\n            \"lastModified\": \"2020-10-08 18:48:12.716\",\n            \"createdBy\": {\n                \"id\": \"34ffc2b7-e368-4c31-9fbd-4bce18368c14\",\n                \"ref\": \"/t/carbon.super/scim2/Users/34ffc2b7-e368-4c31-9fbd-4bce18368c14\",\n                \"username\": \"\"\n            },\n            \"lastModifiedBy\": {\n                \"id\": \"34ffc2b7-e368-4c31-9fbd-4bce18368c14\",\n                \"ref\": \"/t/carbon.super/scim2/Users/34ffc2b7-e368-4c31-9fbd-4bce18368c14\",\n                \"username\": \"\"\n            }\n        },\n        \"attributes\": []\n    },\n    {\n        \"id\": \"6a804e84-c7c9-4d76-883d-b70493323745\",\n        \"name\": \"97ORG\",\n        \"displayName\": \"Heseiiii constructions\",\n        \"description\": \"EU organization\",\n        \"status\": \"ACTIVE\",\n        \"parent\": {\n            \"id\": \"ROOT\",\n            \"ref\": \"\",\n            \"name\": \"ROOT\",\n            \"displayName\": \"ROOT\"\n        },\n        \"meta\": {\n            \"created\": \"2020-10-08 18:26:47.377\",\n            \"lastModified\": \"2020-10-08 18:26:47.377\",\n            \"createdBy\": {\n                \"id\": \"34ffc2b7-e368-4c31-9fbd-4bce18368c14\",\n                \"ref\": \"/t/carbon.super/scim2/Users/34ffc2b7-e368-4c31-9fbd-4bce18368c14\",\n                \"username\": \"\"\n            },\n            \"lastModifiedBy\": {\n                \"id\": \"34ffc2b7-e368-4c31-9fbd-4bce18368c14\",\n                \"ref\": \"/t/carbon.super/scim2/Users/34ffc2b7-e368-4c31-9fbd-4bce18368c14\",\n                \"username\": \"\"\n            }\n        },\n        \"attributes\": []\n    },\n    {\n        \"id\": \"d18febde-6a22-4299-959f-041a928eec78\",\n        \"name\": \"425ORG\",\n        \"displayName\": \"QAORG1\",\n        \"description\": \"EU organization\",\n        \"status\": \"ACTIVE\",\n        \"parent\": {\n            \"id\": \"ROOT\",\n            \"ref\": \"\",\n            \"name\": \"ROOT\",\n            \"displayName\": \"ROOT\"\n        },\n        \"meta\": {\n            \"created\": \"2020-10-09 04:22:24.909\",\n            \"lastModified\": \"2020-10-09 04:22:24.909\",\n            \"createdBy\": {\n                \"id\": \"34ffc2b7-e368-4c31-9fbd-4bce18368c14\",\n                \"ref\": \"/t/carbon.super/scim2/Users/34ffc2b7-e368-4c31-9fbd-4bce18368c14\",\n                \"username\": \"\"\n            },\n            \"lastModifiedBy\": {\n                \"id\": \"34ffc2b7-e368-4c31-9fbd-4bce18368c14\",\n                \"ref\": \"/t/carbon.super/scim2/Users/34ffc2b7-e368-4c31-9fbd-4bce18368c14\",\n                \"username\": \"\"\n            }\n        },\n        \"attributes\": []\n    },\n    {\n        \"id\": \"9bf509f5-65ed-4b65-b688-847f224eb19b\",\n        \"name\": \"79ORG\",\n        \"displayName\": \"Heseiiii constructions\",\n        \"description\": \"EU organization\",\n        \"status\": \"ACTIVE\",\n        \"parent\": {\n            \"id\": \"ROOT\",\n            \"ref\": \"\",\n            \"name\": \"ROOT\",\n            \"displayName\": \"ROOT\"\n        },\n        \"meta\": {\n            \"created\": \"2020-10-09 04:20:06.321\",\n            \"lastModified\": \"2020-10-09 04:20:06.321\",\n            \"createdBy\": {\n                \"id\": \"34ffc2b7-e368-4c31-9fbd-4bce18368c14\",\n                \"ref\": \"/t/carbon.super/scim2/Users/34ffc2b7-e368-4c31-9fbd-4bce18368c14\",\n                \"username\": \"\"\n            },\n            \"lastModifiedBy\": {\n                \"id\": \"34ffc2b7-e368-4c31-9fbd-4bce18368c14\",\n                \"ref\": \"/t/carbon.super/scim2/Users/34ffc2b7-e368-4c31-9fbd-4bce18368c14\",\n                \"username\": \"\"\n            }\n        },\n        \"attributes\": []\n    },\n    {\n        \"id\": \"71760a95-a129-49e7-95d6-7273640a6ae0\",\n        \"name\": \"994ORG\",\n        \"displayName\": \"Heseiiii constructions\",\n        \"description\": \"EU organization\",\n        \"status\": \"ACTIVE\",\n        \"parent\": {\n            \"id\": \"ROOT\",\n            \"ref\": \"\",\n            \"name\": \"ROOT\",\n            \"displayName\": \"ROOT\"\n        },\n        \"meta\": {\n            \"created\": \"2020-10-08 20:32:23.237\",\n            \"lastModified\": \"2020-10-08 20:32:23.237\",\n            \"createdBy\": {\n                \"id\": \"34ffc2b7-e368-4c31-9fbd-4bce18368c14\",\n                \"ref\": \"/t/carbon.super/scim2/Users/34ffc2b7-e368-4c31-9fbd-4bce18368c14\",\n                \"username\": \"\"\n            },\n            \"lastModifiedBy\": {\n                \"id\": \"34ffc2b7-e368-4c31-9fbd-4bce18368c14\",\n                \"ref\": \"/t/carbon.super/scim2/Users/34ffc2b7-e368-4c31-9fbd-4bce18368c14\",\n                \"username\": \"\"\n            }\n        },\n        \"attributes\": []\n    }\n]"
						},
						{
							"name": "Get Organizations with Filter by displayname eq \"\"",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cache-Control",
										"type": "text",
										"value": "no-cache"
									}
								],
								"url": {
									"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations?$filter=name%20eq%20%27425ORG",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"identity",
										"organization-mgt",
										"v1.0",
										"organizations"
									],
									"query": [
										{
											"key": "$filter",
											"value": "name%20eq%20%27425ORG"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Date",
									"value": "Fri, 09 Oct 2020 10:11:35 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "close"
								},
								{
									"key": "Server",
									"value": "WSO2 Carbon Server"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": \"ORGMGT_00050\",\n    \"message\": \"Internal Server Error\",\n    \"description\": \"Internal Server Error\"\n}"
						}
					]
				},
				{
					"name": "Get Organizations with Filter by Type=Partner",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e3dc2dac-fed4-42e4-9188-1a4a8748b235",
								"exec": [
									"let response = pm.response.json();\r",
									"pm.test(\"Verify organizations list has returned\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Return non-empty array\", function () {\r",
									"    pm.expect(response).to.have.instanceOf(Array);\r",
									"    pm.expect(response).to.have.members;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Cache-Control",
								"type": "text",
								"value": "no-cache"
							}
						],
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations?$filter=attributeKey%20eq%20%27Type%27%20and%20attributeValue%20eq%20%27Partner%27",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations"
							],
							"query": [
								{
									"key": "$filter",
									"value": "attributeKey%20eq%20%27Type%27%20and%20attributeValue%20eq%20%27Partner%27"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Organization which removed exp attribute",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bfd5896f-0322-4109-b211-73d557a6dc64",
								"exec": [
									"pm.test(\"Verify organizations list has returned\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Cache-Control",
								"type": "text",
								"value": "no-cache"
							}
						],
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations?sortBy=name&sortOrder=DESC",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "name"
								},
								{
									"key": "sortOrder",
									"value": "DESC"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Organizations with Filter by type=Partner and status=Active",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f942120b-119c-4a55-b190-1e6af6a4030e",
								"exec": [
									"let response = pm.response.json();\r",
									"pm.test(\"Verify organizations list has returned\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Return non-empty array\", function () {\r",
									"    pm.expect(response).to.have.instanceOf(Array);\r",
									"    pm.expect(response).to.have.members;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Cache-Control",
								"type": "text",
								"value": "no-cache"
							}
						],
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations?$filter=status%20eq%20%27ACTIVE%27and%20attributeValue%20eq%20%27Partner%27",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations"
							],
							"query": [
								{
									"key": "$filter",
									"value": "status%20eq%20%27ACTIVE%27and%20attributeValue%20eq%20%27Partner%27"
								}
							]
						}
					},
					"response": [
						{
							"name": "Get Organizations with Filter by displayname eq \"\"",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cache-Control",
										"type": "text",
										"value": "no-cache"
									}
								],
								"url": {
									"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations?$filter=name%20eq%20%27425ORG",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"identity",
										"organization-mgt",
										"v1.0",
										"organizations"
									],
									"query": [
										{
											"key": "$filter",
											"value": "name%20eq%20%27425ORG"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Date",
									"value": "Fri, 09 Oct 2020 10:11:35 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "close"
								},
								{
									"key": "Server",
									"value": "WSO2 Carbon Server"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": \"ORGMGT_00050\",\n    \"message\": \"Internal Server Error\",\n    \"description\": \"Internal Server Error\"\n}"
						}
					]
				},
				{
					"name": "Get Organizations with Filter by OR operator",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "105dd982-ce23-41b9-9b77-d86b441fe1ec",
								"exec": [
									"let response = pm.response.json();\r",
									"pm.test(\"Verify organizations list has returned\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Return non-empty array\", function () {\r",
									"    pm.expect(response).to.have.instanceOf(Array);\r",
									"    pm.expect(response).to.have.members;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Cache-Control",
								"type": "text",
								"value": "no-cache"
							}
						],
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations?$filter=name%20eq%20%27{{OrgName}}%27or%20attributeValue%20eq%20%27BYOXFED%27",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations"
							],
							"query": [
								{
									"key": "$filter",
									"value": "name%20eq%20%27{{OrgName}}%27or%20attributeValue%20eq%20%27BYOXFED%27"
								}
							]
						}
					},
					"response": [
						{
							"name": "Get Organizations with Filter by AND operator",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cache-Control",
										"type": "text",
										"value": "no-cache"
									}
								],
								"url": {
									"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations?$filter=name%20eq%20%27425ORG%27or%20attributeValue%20eq%20%27BYOXFED%27",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"identity",
										"organization-mgt",
										"v1.0",
										"organizations"
									],
									"query": [
										{
											"key": "$filter",
											"value": "name%20eq%20%27425ORG%27or%20attributeValue%20eq%20%27BYOXFED%27"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Date",
									"value": "Fri, 09 Oct 2020 11:00:32 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Server",
									"value": "WSO2 Carbon Server"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": \"1fb49c23-e3cc-49f7-a2af-d7ebe5e2e0fa\",\n        \"name\": \"485ORG\",\n        \"displayName\": \"\",\n        \"description\": \"EU organization\",\n        \"status\": \"ACTIVE\",\n        \"parent\": {\n            \"id\": \"ROOT\",\n            \"ref\": \"\",\n            \"name\": \"ROOT\",\n            \"displayName\": \"ROOT\"\n        },\n        \"meta\": {\n            \"created\": \"2020-10-08 18:40:15.064\",\n            \"lastModified\": \"2020-10-08 18:48:12.716\",\n            \"createdBy\": {\n                \"id\": \"34ffc2b7-e368-4c31-9fbd-4bce18368c14\",\n                \"ref\": \"/t/carbon.super/scim2/Users/34ffc2b7-e368-4c31-9fbd-4bce18368c14\",\n                \"username\": \"\"\n            },\n            \"lastModifiedBy\": {\n                \"id\": \"34ffc2b7-e368-4c31-9fbd-4bce18368c14\",\n                \"ref\": \"/t/carbon.super/scim2/Users/34ffc2b7-e368-4c31-9fbd-4bce18368c14\",\n                \"username\": \"\"\n            }\n        },\n        \"attributes\": []\n    },\n    {\n        \"id\": \"6a804e84-c7c9-4d76-883d-b70493323745\",\n        \"name\": \"97ORG\",\n        \"displayName\": \"Heseiiii constructions\",\n        \"description\": \"EU organization\",\n        \"status\": \"ACTIVE\",\n        \"parent\": {\n            \"id\": \"ROOT\",\n            \"ref\": \"\",\n            \"name\": \"ROOT\",\n            \"displayName\": \"ROOT\"\n        },\n        \"meta\": {\n            \"created\": \"2020-10-08 18:26:47.377\",\n            \"lastModified\": \"2020-10-08 18:26:47.377\",\n            \"createdBy\": {\n                \"id\": \"34ffc2b7-e368-4c31-9fbd-4bce18368c14\",\n                \"ref\": \"/t/carbon.super/scim2/Users/34ffc2b7-e368-4c31-9fbd-4bce18368c14\",\n                \"username\": \"\"\n            },\n            \"lastModifiedBy\": {\n                \"id\": \"34ffc2b7-e368-4c31-9fbd-4bce18368c14\",\n                \"ref\": \"/t/carbon.super/scim2/Users/34ffc2b7-e368-4c31-9fbd-4bce18368c14\",\n                \"username\": \"\"\n            }\n        },\n        \"attributes\": []\n    },\n    {\n        \"id\": \"d18febde-6a22-4299-959f-041a928eec78\",\n        \"name\": \"425ORG\",\n        \"displayName\": \"QAORG1\",\n        \"description\": \"EU organization\",\n        \"status\": \"ACTIVE\",\n        \"parent\": {\n            \"id\": \"ROOT\",\n            \"ref\": \"\",\n            \"name\": \"ROOT\",\n            \"displayName\": \"ROOT\"\n        },\n        \"meta\": {\n            \"created\": \"2020-10-09 04:22:24.909\",\n            \"lastModified\": \"2020-10-09 04:22:24.909\",\n            \"createdBy\": {\n                \"id\": \"34ffc2b7-e368-4c31-9fbd-4bce18368c14\",\n                \"ref\": \"/t/carbon.super/scim2/Users/34ffc2b7-e368-4c31-9fbd-4bce18368c14\",\n                \"username\": \"\"\n            },\n            \"lastModifiedBy\": {\n                \"id\": \"34ffc2b7-e368-4c31-9fbd-4bce18368c14\",\n                \"ref\": \"/t/carbon.super/scim2/Users/34ffc2b7-e368-4c31-9fbd-4bce18368c14\",\n                \"username\": \"\"\n            }\n        },\n        \"attributes\": []\n    },\n    {\n        \"id\": \"9bf509f5-65ed-4b65-b688-847f224eb19b\",\n        \"name\": \"79ORG\",\n        \"displayName\": \"Heseiiii constructions\",\n        \"description\": \"EU organization\",\n        \"status\": \"ACTIVE\",\n        \"parent\": {\n            \"id\": \"ROOT\",\n            \"ref\": \"\",\n            \"name\": \"ROOT\",\n            \"displayName\": \"ROOT\"\n        },\n        \"meta\": {\n            \"created\": \"2020-10-09 04:20:06.321\",\n            \"lastModified\": \"2020-10-09 04:20:06.321\",\n            \"createdBy\": {\n                \"id\": \"34ffc2b7-e368-4c31-9fbd-4bce18368c14\",\n                \"ref\": \"/t/carbon.super/scim2/Users/34ffc2b7-e368-4c31-9fbd-4bce18368c14\",\n                \"username\": \"\"\n            },\n            \"lastModifiedBy\": {\n                \"id\": \"34ffc2b7-e368-4c31-9fbd-4bce18368c14\",\n                \"ref\": \"/t/carbon.super/scim2/Users/34ffc2b7-e368-4c31-9fbd-4bce18368c14\",\n                \"username\": \"\"\n            }\n        },\n        \"attributes\": []\n    },\n    {\n        \"id\": \"71760a95-a129-49e7-95d6-7273640a6ae0\",\n        \"name\": \"994ORG\",\n        \"displayName\": \"Heseiiii constructions\",\n        \"description\": \"EU organization\",\n        \"status\": \"ACTIVE\",\n        \"parent\": {\n            \"id\": \"ROOT\",\n            \"ref\": \"\",\n            \"name\": \"ROOT\",\n            \"displayName\": \"ROOT\"\n        },\n        \"meta\": {\n            \"created\": \"2020-10-08 20:32:23.237\",\n            \"lastModified\": \"2020-10-08 20:32:23.237\",\n            \"createdBy\": {\n                \"id\": \"34ffc2b7-e368-4c31-9fbd-4bce18368c14\",\n                \"ref\": \"/t/carbon.super/scim2/Users/34ffc2b7-e368-4c31-9fbd-4bce18368c14\",\n                \"username\": \"\"\n            },\n            \"lastModifiedBy\": {\n                \"id\": \"34ffc2b7-e368-4c31-9fbd-4bce18368c14\",\n                \"ref\": \"/t/carbon.super/scim2/Users/34ffc2b7-e368-4c31-9fbd-4bce18368c14\",\n                \"username\": \"\"\n            }\n        },\n        \"attributes\": []\n    }\n]"
						},
						{
							"name": "Get Organizations with Filter by displayname eq \"\"",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cache-Control",
										"type": "text",
										"value": "no-cache"
									}
								],
								"url": {
									"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations?$filter=name%20eq%20%27425ORG",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"identity",
										"organization-mgt",
										"v1.0",
										"organizations"
									],
									"query": [
										{
											"key": "$filter",
											"value": "name%20eq%20%27425ORG"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Date",
									"value": "Fri, 09 Oct 2020 10:11:35 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "close"
								},
								{
									"key": "Server",
									"value": "WSO2 Carbon Server"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": \"ORGMGT_00050\",\n    \"message\": \"Internal Server Error\",\n    \"description\": \"Internal Server Error\"\n}"
						}
					]
				},
				{
					"name": "PATCH the Parent organization",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ee16fe78-ff09-4efb-a49a-b9012add424b",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"op\": \"add\",\n        \"path\": \"/attributes/validate\",\n        \"value\": \"true\"\n    },\n    {\n        \"op\": \"remove\",\n        \"path\": \"/attributes/Exp\"\n    },\n    {\n        \"op\": \"replace\",\n        \"path\": \"/description\",\n        \"value\": \"Parent Organization\"\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations/{{ParentOrg}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations",
								"{{ParentOrg}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Org to validate PATCH operations",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8290f2ae-3af6-4663-adab-ebd4cae0c240",
								"exec": [
									"let response = pm.response.json();",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Each object should have 2 keys\", () => {",
									"    _.each(pm.response.attributes, (item) => {",
									"        pm.expect(item).to.be.an('object').and.have.keys(['key', 'value'])",
									"    })",
									"})",
									"",
									"pm.test(\"Validate the patch operation has successfully done.\", function () {",
									"    pm.expect(response).to.have.ownProperty(\"description\"); ",
									"    pm.expect(response.description).to.equal(\"Parent Organization\");",
									"",
									"    // validate attribute should be true",
									"    const validateAttribute = response.attributes.find(m => m.key === \"validate\");",
									"    pm.expect(validateAttribute.value).to.equal(\"true\");",
									"",
									"    // Exp attribute should not be found",
									"    const ExpAttribute = response.attributes.find(m => m.key === \"Exp\");",
									"    pm.expect(ExpAttribute).to.be.undefined;",
									"    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"op\": \"add\",\n        \"path\": \"/attributes/validate\",\n        \"value\": \"true\"\n    },\n    {\n        \"op\": \"remove\",\n        \"path\": \"/attributes/Exp\"\n    },\n    {\n        \"op\": \"replace\",\n        \"path\": \"/description\",\n        \"value\": \"Parent Organization\"\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations/{{ParentOrg}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations",
								"{{ParentOrg}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH the parent organization - use invalid payload(add operation without a path)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "083d1f46-67ea-47ae-a425-f60894f744a1",
								"exec": [
									"pm.test(\"Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"op\": \"add\",\n        \"value\": \"true\"\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations/{{ParentOrg}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations",
								"{{ParentOrg}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Children organizations of ParentOrg by admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ace3cc5f-4791-443b-b15f-f2084ae0061b",
								"exec": [
									"let response = pm.response.json();",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response includes org ids\", function () {",
									"    pm.expect(response).to.have.instanceOf(Array);",
									"    pm.expect(response).to.have.empty;",
									"    let allowedChildrenNumber = pm.response.json().length; ",
									"    pm.environment.set(\"allowedChildrenNumber\", allowedChildrenNumber);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations/{{ParentOrg}}/children",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations",
								"{{ParentOrg}}",
								"children"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign Organization_Viewer role to admin user against SubOrg1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b84592b0-e8ae-434f-a0a3-e2051ee3676f",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"roleId\": \"{{OrgViewerRoleId}}\",\n   \"users\": [\n     {\n        \"userId\": \"{{adminId}}\",\n        \"includeSubOrgs\": \"false\"\n     }\n   ]\n }\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations/{{SubOrg1}}/roles",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations",
								"{{SubOrg1}}",
								"roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Children organizations of ParentOrg by admin - since subOrg1 got permission, the output should be increased by one",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cc5bf914-4825-4e21-9344-7f01abb3203c",
								"exec": [
									"let response = pm.response.json();",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response includes org ids\", function () {",
									"    pm.expect(response).to.have.instanceOf(Array);",
									"    pm.expect(response).to.have.members;",
									"});",
									"",
									"pm.test(\"Each item in the array should be string\", () => {",
									"    _.each(response, (member) => {",
									"        pm.expect(member).to.be.a('string');",
									"    })",
									"})",
									"",
									"pm.test(\"Only children organizations which have org view permission will be returned\", function () {",
									"    let currentAllowedChildrenNumber = pm.response.json().length; ",
									"    pm.expect(currentAllowedChildrenNumber).to.be.eq(pm.environment.get('allowedChildrenNumber')+1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations/{{ParentOrg}}/children",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations",
								"{{ParentOrg}}",
								"children"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH to remove parent ID - Fail to Remove",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "610aff73-e592-4913-a240-9cc452c62bdb",
								"exec": [
									"let response = pm.response.json();",
									"pm.test(\"Status code is 400 because can not remove mandatory field : /parent/id\", function () {",
									"    pm.response.to.have.status(400);",
									"     pm.expect(response.code).to.eq('ORGMGT_00005');",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"op\": \"remove\",\n        \"path\": \"/parent/id\"\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations/{{ParentOrg}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations",
								"{{ParentOrg}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH to add parent ID - Fail to add",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3b9b6970-cdbe-4def-9782-497f3cecd2c2",
								"exec": [
									"let response = pm.response.json();",
									"pm.test(\"Status code is 400 because can not remove mandatory field : /parent/id\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(response.code).to.eq('ORGMGT_00005');",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"op\": \"add\",\n        \"path\": \"/parent/id\",\n        \"value\": \"{{ParentOrg}}\"\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations/{{ParentOrg}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations",
								"{{ParentOrg}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH to replace parent ID - can replace",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a968d515-6db7-4510-bc17-81f60811240f",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"op\": \"replace\",\n        \"path\": \"/parent/id\",\n        \"value\": \"{{ROOTOrgId}}\"\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations/{{ParentOrg}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations",
								"{{ParentOrg}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH the ParentOrg status to disable when it has active child organizations",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d2d471a4-1622-4e10-8bf8-1f86b88eeca7",
								"exec": [
									"let response = pm.response.json();",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(response.code).to.eq('ORGMGT_00005');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"op\": \"replace\",\n        \"path\": \"/status\",\n        \"value\": \"DISABLED\"\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations/{{ParentOrg}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations",
								"{{ParentOrg}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign User_administrator role to admin user against SubOrg1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "58ff2719-0afe-4940-b6cd-117d0f51e996",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"roleId\": \"{{UserAdminRoleId}}\",\n   \"users\": [\n     {\n        \"userId\": \"{{adminId}}\",\n        \"includeSubOrgs\": \"false\"\n     }\n   ]\n }\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations/{{SubOrg1}}/roles",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations",
								"{{SubOrg1}}",
								"roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "View members of a role",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f6161deb-9c3d-4c6c-aa47-ef642dd3e045",
								"exec": [
									"let response = pm.response.json();",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response includes member objects\", function () {",
									"    pm.expect(response).to.have.instanceOf(Array);",
									"    pm.expect(response).to.have.members;",
									"});",
									"",
									"pm.test(\"Each item in the array should be objects, and only schemas and id will be returned\", () => {",
									"    _.each(pm.response.attributes, (item) => {",
									"        pm.expect(item).to.be.an('object').and.have.keys(['schemas', 'id'])",
									"    })",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations/{{ROOTOrgId}}/roles/{{OrgAdminRoleId}}/users",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations",
								"{{ROOTOrgId}}",
								"roles",
								"{{OrgAdminRoleId}}",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "View members of a role - with attributes - by system admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dff4178a-61f3-4bec-a987-59d8d1a00404",
								"exec": [
									"let response = pm.response.json();",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response includes member objects\", function () {",
									"    pm.expect(response).to.have.instanceOf(Array);",
									"    pm.expect(response).to.have.members;",
									"});",
									"",
									"pm.test(\"Each item in the array should be objects\", () => {",
									"    _.each(pm.response.attributes, (item) => {",
									"        pm.expect(item).to.be.an('object').and.have.keys(['schemas', 'id', 'name', 'urn:ietf:params:scim:schemas:extension:enterprise:2.0:User'])",
									"    })",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations/{{ROOTOrgId}}/roles/{{OrgAdminRoleId}}/users?attributes=name,urn:ietf:params:scim:schemas:extension:enterprise:2.0:User.organization",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations",
								"{{ROOTOrgId}}",
								"roles",
								"{{OrgAdminRoleId}}",
								"users"
							],
							"query": [
								{
									"key": "attributes",
									"value": "name,urn:ietf:params:scim:schemas:extension:enterprise:2.0:User.organization"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "View members of a role - with attributes - by User1(smith)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5e817532-a35c-4f58-ad4a-67e271c05031",
								"exec": [
									"let response = pm.response.json();",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response includes member objects\", function () {",
									"    pm.expect(response).to.have.instanceOf(Array);",
									"    pm.expect(response).to.have.members;",
									"});",
									"",
									"pm.test(\"Each item in the array should be objects\", () => {",
									"    _.each(pm.response.attributes, (item) => {",
									"        pm.expect(item).to.be.an('object').and.have.keys(['schemas', 'id', 'name', 'urn:ietf:params:scim:schemas:extension:enterprise:2.0:User'])",
									"    })",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PasswordOfUserInParentOrg}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{UserNameOfUserInParentOrg}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations/{{ParentOrg}}/roles/{{OrgAdminRoleId}}/users?attributes=name,urn:ietf:params:scim:schemas:extension:enterprise:2.0:User.organization",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations",
								"{{ParentOrg}}",
								"roles",
								"{{OrgAdminRoleId}}",
								"users"
							],
							"query": [
								{
									"key": "attributes",
									"value": "name,urn:ietf:params:scim:schemas:extension:enterprise:2.0:User.organization"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add an application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b2f238d5-88bb-450a-a433-bb5a143c7b46",
								"exec": [
									"let SampleApplicationName = \"SAMPLE_ADMIN_PORTAL\";",
									"pm.environment.set('SampleApplicationName',SampleApplicationName);",
									"",
									"let ClientKey = \"SAMPLE_ADMIN_PORTAL\";",
									"pm.environment.set('ClientKey',ClientKey);",
									"",
									"let ClientSecret = \"qoSmdpKWgqDvqqycoHEcmPtyOGoa\";",
									"pm.environment.set('ClientSecret',ClientSecret);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "312b9d4f-fd4f-4e5c-ba20-c073af906205",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{SampleApplicationName}}\",\n  \"description\": \"This is the configuration for Pickup application.\",\n  \"inboundProtocolConfiguration\": {\n    \"oidc\": {\n        \"clientId\": \"{{ClientKey}}\",\n        \"clientSecret\": \"{{ClientSecret}}\",\n        \"state\": \"ACTIVE\",\n        \"grantTypes\": [\n            \"refresh_token\",\n            \"urn:ietf:params:oauth:grant-type:saml2-bearer\",\n            \"implicit\",\n            \"password\",\n            \"client_credentials\",\n            \"iwa:ntlm\",\n            \"urn:ietf:params:oauth:grant-type:device_code\",\n            \"authorization_code\",\n            \"urn:ietf:params:oauth:grant-type:uma-ticket\",\n            \"account_switch\",\n            \"urn:ietf:params:oauth:grant-type:jwt-bearer\"\n        ],\n        \"callbackURLs\": [\n            \"https://localhost:9443/localhost/callback\"\n        ],\n        \"allowedOrigins\": [],\n        \"publicClient\": false,\n        \"pkce\": {\n            \"mandatory\": false,\n            \"supportPlainTransformAlgorithm\": true\n        },\n        \"accessToken\": {\n            \"type\": \"Default\",\n            \"userAccessTokenExpiryInSeconds\": 3600,\n            \"applicationAccessTokenExpiryInSeconds\": 3600\n        },\n        \"refreshToken\": {\n            \"expiryInSeconds\": 86400,\n            \"renewRefreshToken\": true\n        },\n        \"idToken\": {\n            \"expiryInSeconds\": 3600,\n            \"audience\": [],\n            \"encryption\": {\n                \"enabled\": false,\n                \"algorithm\": \"\",\n                \"method\": \"\"\n            }\n        },\n        \"logout\": {},\n        \"validateRequestObjectSignature\": false,\n        \"scopeValidators\": []\n        }\n    }\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/api/server/v1/applications",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"server",
								"v1",
								"applications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Created application id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4dbf25d2-bf6d-433f-a155-55059059581a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "20ebe5f0-7757-448d-b284-c0b33733dbbc",
								"exec": [
									"let response = pm.response.json();",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response having application details\", function () {",
									"    pm.expect(response).to.have.ownProperty(\"totalResults\"); ",
									"    pm.expect(response.totalResults).to.equal(1);",
									"    pm.expect(response).to.have.ownProperty(\"count\"); ",
									"    pm.expect(response.count).to.equal(1);",
									"    pm.expect(response).to.have.ownProperty(\"applications\");",
									"    pm.expect(response.applications).to.have.instanceOf(Array);",
									"    let SampleApplicationId = response.applications[0].id;",
									"    pm.environment.set('SampleApplicationId', SampleApplicationId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/api/server/v1/applications?filter=name+eq+{{SampleApplicationName}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"server",
								"v1",
								"applications"
							],
							"query": [
								{
									"key": "filter",
									"value": "name+eq+{{SampleApplicationName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get scope of admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3f7d8777-5802-4e78-91f4-378871ef6ea5",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{ClientSecret}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{ClientKey}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "ORGANIZATION_SYSTEM",
									"type": "text"
								}
							],
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/oauth2/token",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"oauth2",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign Role_Administrator role to admin user against SubOrg1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "686e7074-df4d-46dd-bd9f-133c387098d3",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"roleId\": \"{{RoleAdminRoleId}}\",\n   \"users\": [\n     {\n        \"userId\": \"{{adminId}}\",\n        \"includeSubOrgs\": \"false\"\n     }\n   ]\n }\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations/{{SubOrg1}}/roles",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations",
								"{{SubOrg1}}",
								"roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Organization_Viewer role from User2(kim) from SubOrg1 by User1(smith) with AdminRole_Administrator role",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "89a4dc0d-f945-47c2-9a5c-eeefe0238487",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{PasswordOfUserInParentOrg}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{UserNameOfUserInParentOrg}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations/{{SubOrg1}}/roles/{{OrgViewerRoleId}}/users/{{User2InParentOrg}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations",
								"{{SubOrg1}}",
								"roles",
								"{{OrgViewerRoleId}}",
								"users",
								"{{User2InParentOrg}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a user3 in SubOrg",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2dfbea03-bc45-4934-8202-c889a5dabc8a",
								"exec": [
									"let response = pm.response.json();",
									"pm.test(\"Successful POST request\", function () {",
									"     pm.response.to.have.status(201);",
									"});",
									"",
									"pm.environment.set(\"User3SubOrg\", response.id);",
									"",
									"pm.test(\"Response includes specified elements\", function () {",
									"    pm.expect(response).to.have.ownProperty(\"name\"); ",
									"    pm.expect(response.name.givenName).to.equal(\"Mary\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ce85a613-deed-452b-8508-f6f5b84b8a6b",
								"exec": [
									"let UserNameOfUser3InSubOrg= 'mary'",
									"pm.environment.set('UserNameOfUser3InSubOrg',UserNameOfUser3InSubOrg)",
									"",
									"let PasswordOfUser3InSubOrg = 'mary123'",
									"pm.environment.set('PasswordOfUser3InSubOrg',PasswordOfUser3InSubOrg)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"schemas\":[],\n    \"name\":{\n        \"givenName\":\"Mary\",\n        \"familyName\":\"Johny\"\n    },\n    \"userName\":\"{{UserNameOfUser3InSubOrg}}\",\n    \"password\":\"{{PasswordOfUser3InSubOrg}}\",\n     \"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\": {\n        \"organization\": {\n            \"name\": \"{{OrgName1}}\"\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/scim2/Users",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"scim2",
								"Users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user3 in SubOrg",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a85e7e57-66f3-4cc3-9339-ec239747196f",
								"exec": [
									"let response = pm.response.json();",
									"pm.test(\"Successful PATCH request\", function () {",
									"     pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Successfully updated the user resource\", function () {",
									"    pm.expect(response).to.have.ownProperty(\"nickName\"); ",
									"    pm.expect(response.nickName).to.equal(pm.environment.get('NickNameOfUser3'));",
									"    pm.expect(response.name.familyName).to.equal(pm.environment.get('FamilyNameOfUser3'));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "692dcc48-5350-4ec6-b741-cac4d73fd670",
								"exec": [
									"let NickNameOfUser3 = 'shaggy'",
									"pm.environment.set('NickNameOfUser3',NickNameOfUser3)",
									"",
									"let FamilyNameOfUser3 = 'John'",
									"pm.environment.set('FamilyNameOfUser3',FamilyNameOfUser3)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"schemas\":[\n        \"urn:ietf:params:scim:api:messages:2.0:PatchOp\"\n        ],\n    \"Operations\":[\n        {\n            \"op\":\"add\",\n            \"value\":\n            {\n                \"nickName\":\"{{NickNameOfUser3}}\"\n            }\n        },\n        {\n            \"op\": \"replace\",\n            \"path\": \"name.familyName\",\n            \"value\": \"{{FamilyNameOfUser3}}\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/scim2/Users/{{User3SubOrg}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"scim2",
								"Users",
								"{{User3SubOrg}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE subOrg1 by admin - unauthorized request",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e69ef4a-4bdb-4192-917e-3400e30afd74",
								"exec": [
									"pm.test(\"Unauthorized organization deletion - Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations/{{SubOrg1}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations",
								"{{SubOrg1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign Organization_Administrator role to admin user against SubOrg1 Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d5a87d27-d050-4150-ad94-23b6d8638fc8",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"roleId\": \"{{OrgAdminRoleId}}\",\n   \"users\": [\n     {\n        \"userId\": \"{{adminId}}\",\n        \"includeSubOrgs\": \"false\"\n     }\n   ]\n }\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations/{{SubOrg1}}/roles",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations",
								"{{SubOrg1}}",
								"roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE subOrg1 by admin - authorized. but org is not in disable state",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e38931e1-a85f-4a61-b9b8-e349d6d01fc8",
								"exec": [
									"let response = pm.response.json();",
									"pm.test(\"Organization is not in disable state\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(response.code).to.equal('ORGMGT_00006');",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations/{{SubOrg1}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations",
								"{{SubOrg1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH the SubOrg status to disable",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a8356a6b-eb86-4fb1-b4dc-b05e107d0d82",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"op\": \"replace\",\n        \"path\": \"/status\",\n        \"value\": \"DISABLED\"\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations/{{SubOrg1}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations",
								"{{SubOrg1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE subOrg1 by admin - request authorized. subOrg1 status is disabled. but habe users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6cf5953b-1f8b-41ea-aeb9-1088807dadc6",
								"exec": [
									"let response = pm.response.json();",
									"pm.test(\"Deletion failed because organization has usres even though the status is disabled\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(response.code).to.equal('ORGMGT_00006');",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations/{{SubOrg1}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations",
								"{{SubOrg1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE user3 in SubOrg1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "49fe21da-7b88-4aa4-8e29-bb8f874c22ff",
								"exec": [
									"pm.test(\"Successful user deletion\", function () {",
									"     pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3c272f9c-174b-4d58-9c98-6b44db5ad9cc",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/scim2/Users/{{User3SubOrg}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"scim2",
								"Users",
								"{{User3SubOrg}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE subOrg1 by admin - (successful)request authorized. subOrg1 status is disabled.  no usres",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b266e2c2-28be-4cc7-9a79-980a22d7aa45",
								"exec": [
									"pm.test(\"Delete the organization successfully\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations/{{SubOrg1}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations",
								"{{SubOrg1}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Cleanup-requests",
			"item": [
				{
					"name": "Delet the created application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7bc3bfd9-e5f2-445c-b55b-4ea4cb98e0d3",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b70aed3e-0f4d-4689-b658-02d3df7c46a7",
								"exec": [
									"",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/api/server/v1/applications/{{SampleApplicationId}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"server",
								"v1",
								"applications",
								"{{SampleApplicationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH the ParentOrg status to disable",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6cdbe556-f38d-419b-b04f-885ee83cd4fb",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"op\": \"replace\",\n        \"path\": \"/status\",\n        \"value\": \"DISABLED\"\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations/{{ParentOrg}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations",
								"{{ParentOrg}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE user1(smith) in ParentOrg",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "af33e7d5-320e-4322-b1ee-485ce6752049",
								"exec": [
									"pm.test(\"Successful user deletion\", function () {",
									"     pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a54d1921-9e02-4a98-9339-8837f26db16d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/scim2/Users/{{UserInParentOrg}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"scim2",
								"Users",
								"{{UserInParentOrg}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE user2(kim) in ParentOrg",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "eef1ba15-045f-426b-bb83-79c630e13430",
								"exec": [
									"pm.test(\"Successful user deletion\", function () {",
									"     pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "db43309e-e27f-4c51-8bc5-a5b62f9be354",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/scim2/Users/{{User2InParentOrg}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"scim2",
								"Users",
								"{{User2InParentOrg}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE ParentOrg by admin - authorized, it is in disable state, and doesn't have active child organizations/ users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d978b1f1-47ed-4cfa-8dff-f1a96b078187",
								"exec": [
									"pm.test(\"Delete the organization successfully\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations/{{ParentOrg}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations",
								"{{ParentOrg}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH the OrgContainsSpecialCharInName status to disable",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "582c21a5-1c42-4bc0-8477-cae72792f4e7",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"op\": \"replace\",\n        \"path\": \"/status\",\n        \"value\": \"DISABLED\"\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations/{{OrgContainsSpecialCharInName}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations",
								"{{OrgContainsSpecialCharInName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE OrgContainsSpecialCharInName  - authorized, it is in disable state, and doesn't have active child organizations/ users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c5df04ed-a736-41f7-9f69-225b207774fd",
								"exec": [
									"pm.test(\"Delete the organization successfully\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations/{{OrgContainsSpecialCharInName}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations",
								"{{OrgContainsSpecialCharInName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH the OrgContainsSpacceInName status to disable",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9a93fa8-2f1b-4cf7-8c23-546876ecfb84",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"op\": \"replace\",\n        \"path\": \"/status\",\n        \"value\": \"DISABLED\"\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations/{{OrgContainsSpacceInName}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations",
								"{{OrgContainsSpacceInName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE OrgContainsSpacceInName   - authorized, it is in disable state, and doesn't have active child organizations/ users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "53e4a9b1-2f93-42ac-a6a7-312ff88c3c2b",
								"exec": [
									"pm.test(\"Delete the organization successfully\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations/{{OrgContainsSpacceInName}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations",
								"{{OrgContainsSpacceInName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH the OrgWithoutDisplayName status to disable",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2d137cd8-e726-4cad-bae6-11586da04268",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"op\": \"replace\",\n        \"path\": \"/status\",\n        \"value\": \"DISABLED\"\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations/{{OrgWithoutDisplayName}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations",
								"{{OrgWithoutDisplayName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE OrgWithoutDisplayName   - authorized, it is in disable state, and doesn't have active child organizations/ users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9d56a63a-4d75-4fcc-afa3-a7d91de8d89a",
								"exec": [
									"pm.test(\"Delete the organization successfully\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations/{{OrgWithoutDisplayName}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations",
								"{{OrgWithoutDisplayName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Organization_Administrator role from admin from ROOT",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5c2f63c-1ca2-4ee8-8511-ee37cea2b3d4",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations/{{ROOTOrgId}}/roles/{{OrgAdminRoleId}}/users/{{adminId}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations",
								"{{ROOTOrgId}}",
								"roles",
								"{{OrgAdminRoleId}}",
								"users",
								"{{adminId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE User_Administrator role from admin from ROOT",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "33b4fbba-f743-45f0-aa5d-ea63f3550096",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/api/identity/organization-mgt/v1.0/organizations/{{ROOTOrgId}}/roles/{{UserAdminRoleId}}/users/{{adminId}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"identity",
								"organization-mgt",
								"v1.0",
								"organizations",
								"{{ROOTOrgId}}",
								"roles",
								"{{UserAdminRoleId}}",
								"users",
								"{{adminId}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}